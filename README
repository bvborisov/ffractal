FFractal is a IFS generator, capable of creating linear and non-linear(a.k.a fractal flames) systems. It has a straightforward UI and is written in java. In this repository you can find an executable .jar file called ffractal.jar and all the source files for the project. I have also included eclipse files, should you wish to import the project and modify/use it.
Below you can find a quick tutorial of how to use the package. For more information on fractal flames, read http://flam3.com/flame.pdf .
HOW TO USE THIS SOFTWARE:
1. Download the ffractal.jar file to your system.
2. Execute from command line/shell in the same directory : java -jar ffractal.jar
3. In the UI that appears, click on the button in the middle of the left panel, named "new array of functions"
4. Input any number of functions (say 15)
5. Pick a color 
6. Pick a variation (say handkerchief)
7. From the 'rendering actions' tab click (in this order) 'set color provider type' and chose the default 'Basic'. Then click on 'compute points' and pick '1500000' ( for example). Finally click on 'render points'. Should you wish to rearange or delete some actions, click on them in the list below and use the arrows/press the delete key (the same applies for functions in the left panel).
8. In the panel 'space' click 'best'
9. In the 'output' section, make the dimensions 2,000 x 2,000 (for example) and pick a file destination of your liking(can be ommited). 
10. Click on generate fractal and wait.
11. Wait for it..
12. Done! Now enjoy, repeat and play around.
I hope this is interesting to people.
If you want to use the full power of this fractal generator read below:
---------------------------------
One by one function creation
---------------------------------
If you want to create functions one by one use the 'new function' button in the panel 'Functions'. Chose the type of the function - random gives you random coefficients in the range -1..1 and manual lets you input them yourself. In the variations panel, if you wish to create a linear IFS fractal, pick the variation as 'Linear'. Otherwise pick whatever you desire. You then preview your function and it get spilled to the function list on the left. 
---------------------------------
Setting a final function
---------------------------------
A final function is applied after all points have been plotted and is not iterated ( see the paper I gave a link to at the begining of this). For our purposes this has the same interface as the 'new function' invocation ( so read it ). 
---------------------------------
Rendering actions
---------------------------------
You can rotate/translate an image. The format for the point of origin/amount of translation is ( x ; y ) where x and y are DOUBLES (0.0 or 0.3123131) and not INTEGERS. Also whitespaces do matter. Direct rendering would speed up the rendering a little bit. Renderer type by default is a dot, but you can pick line or cube/quad curve - try them out. 

That's basically all of it.

The project was created by Gsavin and is forked/modified by Bilyan Borisov under the terms of the GNU license. Should you wish to modify it/redistribute it please do. 
Contact address : bilyan dot borisov aT gmail dot com
